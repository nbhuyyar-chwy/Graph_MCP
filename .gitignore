# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is not recommended to check in the entire .idea directory but you may want to add
#  specific directories or files.
.idea/

# Vim
*.swp
*.swo
*~

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon?
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# VS Code
.vscode/
*.code-workspace

# ================================
# PROJECT SPECIFIC CONFIGURATIONS
# ================================

# Neo4j credentials and sensitive files
.env
.env.local
.env.production
.env.test
*.env

# Log files (but keep structured logs in data/logs/)
*.log
logs/
log/

# Neo4j specific
neo4j_data/
*.db
*.dump

# MCP server specific
mcp_logs/
server_logs/

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Backup files
*.bak
*.backup

# Test files and outputs
test_results/
test_output/
test_reports/

# Documentation builds
docs/build/
docs/_build/

# Local configuration overrides
config_local.py
local_config.py

# Database dumps
*.sql
*.dump

# ================================
# DATA DIRECTORY CONFIGURATIONS
# ================================

# Large data files - prevent GitHub upload issues
# Keep the actual data files but ignore any large processing outputs
data/sessions/*.large
data/graph/*.large
data/orders/*.large

# Exclude specific large session files that exceed GitHub's 100MB limit
data/sessions/AlexanderSessionsShort.csv
data/sessions/DiegoSessionShort.csv
data/sessions/MattSessionShort.csv

# Ignore generated/processed data files
data/processed/
data/temp/
data/cache/
data/backup/

# Session analysis outputs and temp files
data/sessions/processed/
data/sessions/temp/
data/sessions/analysis_cache/

# Order processing temp files
data/orders/processed/
data/orders/temp/

# Graph processing temp files  
data/graph/processed/
data/graph/temp/

# Log rotation and backup files
data/logs/*.old
data/logs/*.bak
data/logs/archive/

# ================================
# DEVELOPMENT AND BUILD ARTIFACTS
# ================================

# Memory databases and caches
memory_db/
chroma_db/
vector_db/
*.bin
*.sqlite3

# Analysis and processing outputs
merge_operation_logs/
template_test_logs/
conversations/
api/conversations/
api/memory_db/

# Intelligence processing temp files
intelligence/temp/
intelligence/cache/
intelligence/outputs/

# Scripts temp files
scripts/temp/
scripts/outputs/
scripts/logs/

# Test artifacts
tests/temp/
tests/outputs/
tests/__pycache__/

# Utilities temp files
utilities/temp/
utilities/cache/

# Examples temp files
examples/temp/
examples/outputs/
